What will be the output of the following C code?

        #include <stdio.h>

        int main()

        {

            int i = -3;

            int k = i % 2;

            printf("%d\n", k);

        }

a) Compile time error
b) -1 *
c) 1
d) Implementation defined


        #include <stdio.h>

        int main()

        {

            int c = 2 ^ 3;

            printf("%d\n", c);

        }

a) 1 *
b) 8
c) 9
d) 0


        #include <stdio.h>

        main()

        {

            int n = 0, m = 0;

            if (n > 0)

                if (m > 0)

                    printf("True");

            else 

                printf("False");

        }

a) True
b) False *
c) No Output will be printed
d) Run Time Error


        #include <stdio.h>

        int main()

        {

            int x = 2, y = 0;

            int z = (y++) ? y == 1 && x : 0;

            printf("%d\n", z);

            return 0;

        }
a) 0 *
b) 1
c) Undefined behaviour
d) Compile time error

        #include <stdio.h>

        int main()

        {

            printf("%d ", 1);

            goto l1;

            printf("%d ", 2);

            l1:goto l2;

            printf("%d ", 3);

            l2:printf("%d ", 4);

       }

a) 1 4 *
b) Compilation error
c) 1 2 4
d) 1 3 4


        #include <stdio.h>

        int main()

        {

            int x = 1;

            if (x > 0)

                printf("inside if\n");

            else if (x > 0)

                printf("inside elseif\n");

        }

a) inside if *
b) inside elseif
c) inside if,inside elseif
d) compile time error

        #include <stdio.h>

        int main()

        {

            void foo();

            printf("1 ");

            foo();

        }

        void foo()

        {

            printf("2 ");

        }

a) 1 2*
b) Compile time error
c) 1 2 1 2
d) Depends on the compiler

        #include <stdio.h>

        void main()

        {

            m();

            printf("%d", x);

        }

        int x;

        void m()

        {

            x = 4;

        }
a) 4
b) Compile time error*
c) 0
d) Undefined

 Which data type can be stored in register?
a) int
b) long
c) float
d) all of the mentioned*

Register variables reside in ________
a) stack
b) registers*
c) heap
d) main memory

        #include <stdio.h>

        #define foo(m, n) m ## n

        int main()

        {

            printf("%s\n", foo(k, l));

        }

a) k l
b) kl
c) Compile time error*
d) Undefined behaviour

        #include <stdio.h>

        int main()

        {

            char *p = NULL;

            char *q = 0;

            if (p)

                printf(" p ");

            else

                printf("nullp");

            if (q)

                printf("q\n");

            else

                printf(" nullq\n");

        }

a) nullp nullq *
b) Depends on the compiler
c) x nullq where x can be p or nullp depending on the value of NULL
d) p q

        #include <stdio.h>

        int main()

        {

            int ary[4] = {1, 2, 3, 4};

            printf("%d\n", *ary);

        }

a) 1*
b) Compile time error
c) Some garbage value
d) Undefined variable

. Which of the following are themselves a collection of different data types?
a) string
b) structures*
c) char
d) all of the mentioned

        #include <stdio.h>

        int main()

        {

            int i = 10, j = 2;

            printf("%d\n", printf("%d %d ", i, j));

        }

a) Compile time error
b) 10 2 4
c) 10 2 2
d) 10 2 5*

 How many digits are present after decimal in float value?
a) 1
b) 3
c) 6*
d) 16

What is the use of function char *strchr(ch, c)?
a) return pointer to first occurrence of ch in c or NULL if not present
b) return pointer to first occurrence of c in ch or NULL if not present*
c) return pointer to first occurrence of ch in c or ignores if not present
d) return pointer to first occurrence of cin ch or ignores if not present

Local variables are stored in an area called ___________
a) Heap
b) Permanent storage area
c) Free memory
d) Stack*

 The C code ‘for(;;)’ represents an infinite loop. It can be terminated by ___________
a) break*
b) exit(0)
c) abort()
d) terminate

What will be the output of the following C code?

        #include <stdio.h>

        void main()

        {

            int k;

            for (k = -3; k < -5; k++)

                printf("Hello");

        }

a) Hello
b) Infinite hello
c) Run time error
d) Nothing*
